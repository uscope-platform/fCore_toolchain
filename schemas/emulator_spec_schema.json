{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "type": "object",
  "title": "Root Schema",
  "required": [
    "cores"
  ],
  "properties": {
    "cores": {
      "type": "array",
      "title": "Array of core objects describing one or more cores in a multicore cluster",
      "items": {
        "type": "object",
        "title": "Object describing a core to emulate",
        "required": [
          "id",
          "order",
          "program",
          "channels",
          "options"
        ],
        "properties": {
          "id": {
            "type": "string",
            "title": "Identification string of the core"
          },
          "input_file": {
            "type": "string",
            "title": "path of the data input file"
          },
          "order": {
            "type": "integer",
            "title": "Field indicating the order in which cores must be run in a multicore emulation session"
          },
          "inputs": {
            "type": "array",
            "default": [],
            "title": "Array of objects that specify the external inputs to the core",
            "items": {
              "type": "object",
              "title": "Object describing a single external input",
              "required": [
                "reg_n",
                "channel",
                "type",
                "name"
              ],
              "properties": {
                "channel": {
                  "type": "integer",
                  "title": "Channel to push the input to"
                },
                "reg_n": {
                  "type": "integer",
                  "title": "IO address (or register address if remapping is not active) to push the input to"
                },
                "type": {
                  "type": "string",
                  "title": "Type for the input"
                },
                "name": {
                  "type": "string",
                  "title": "Name of this input (tied to the CSV column title)"
                }
              }
            }
          },
          "outputs": {
            "type": "array",
            "default": [],
            "title": "Array of objects that specify the emulation outputs from the core",
            "items": {
              "type": "object",
              "title": "Object describing a single emulation output",
              "required": [
                "reg_n",
                "type",
                "name"
              ],
              "properties": {
                "reg_n": {
                  "type": "integer",
                  "title": "array containing the register addres and channel nubert of the target"
                },
                "type": {
                  "type": "string",
                  "title": "type to use for the output"
                },
                "name": {
                  "type": "string",
                  "title": "Name to give to this output"
                }
              }
            }
          },
          "program": {
            "type": "object",
            "title": "Description of the program to run on this core",
            "properties": {
              "type": {
                "type": "string",
                "title": "type of the program code file"
              },
              "filename": {
                "type": "string",
                "title": "path of the program input file"
              },
              "content": {
                "type": "string",
                "title": "source code of the selected program"
              },
              "io": {
                "type": "object",
                "title": "Object listing input, output and memories for the program",
                "properties": {
                  "inputs": {
                    "type": "array",
                    "default": [],
                    "title": "List of program inputs",
                    "items": {
                      "type": "string"
                    }
                  },
                  "outputs": {
                    "type": "array",
                    "default": [],
                    "title": "List of program Outputs",
                    "items": {
                      "type": "string"
                    }
                  },
                  "memories": {
                    "type": "array",
                    "default": [],
                    "title": "List of program memories",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "oneOf": [
              {
                "required": [
                  "type",
                  "filename"
                ]
              },
              {
                "required": [
                  "content",
                  "build_settings"
                ]
              }
            ]
          },
          "memory_init": {
            "type": "array",
            "default": [],
            "title": "Array of objects that specify the initial values for state variables",
            "items": {
              "type": "object",
              "title": "Object describing the initial value for a single state variable",
              "required": [
                "reg_n",
                "value",
                "type",
                "name"
              ],
              "properties": {
                "value": {
                  "type": "number",
                  "title": "Value to use for initialization of the state variable"
                },
                "reg_n": {
                  "type": "integer",
                  "title": "IO address (or register address if remapping is not active) of the state variable to initialize"
                },
                "type": {
                  "type": "string",
                  "title": "Type of the value to use for initialization"
                },
                "name": {
                  "type": "string",
                  "title": "Name of the state variable (For documentation purposes only, not used internally)"
                }
              }
            }
          },
          "channels": {
            "type": "integer",
            "title": "number of channels active on this core"
          },
          "options": {
            "type": "object",
            "default": {},
            "title": "Core behaviour configuration options",
            "required": [
              "comparators"
            ],
            "properties": {
              "comparators": {
                "type": "string",
                "title": "Type of comparator implementation implemented for this core"
              },
              "efi_implementation": {
                "type": "string",
                "title": "EFI implementation selector"
              }
            }
          }
        }
      }
    },
    "interconnect": {
      "type": "array",
      "title": "Array of object describing how the cores should be connected",
      "items": {
        "type": "object",
        "title": "Object describing the connection between two cores",
        "required": [
          "source",
          "destination",
          "channels"
        ],
        "properties": {
          "source": {
            "type": "string",
            "title": "source core id"
          },
          "destination": {
            "type": "string",
            "title": "Destination core id"
          },
          "channels": {
            "type": "array",
            "title": "Array specifying the data for each dma channel",
            "items": {
              "type": "object",
              "title": "Object that specifies the data for a single dma channel",
              "required": [
                "name",
                "source",
                "destination"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["scatter_transfer", "vector_transfer", "gather_transfer", "2d_vector_transfer"]
                },
                "length": {
                  "type": "integer",
                  "title": "Size of the vector transfer"
                },
                "stride": {
                  "type": "integer",
                  "title": "Second dimension for the 2d vector transfer"
                },
                "name": {
                  "type": "string",
                  "title": "Name of the connection"
                },
                "source": {
                  "type": "object",
                  "default": [],
                  "title": "array that specifies the channel and address of the source data",
                  "items": {
                    "type": "object",
                    "title": "Object describing the source",
                    "required": [
                      "register",
                      "channel"
                    ],
                    "properties": {
                      "channel": {
                        "type": "integer",
                        "title": "Number of the source channel"
                      },
                      "register": {
                        "type": "integer",
                        "title": "Address of the source register"
                      }
                    }
                  }
                },
                "destination": {
                  "type": "object",
                  "default": [],
                  "title": "array that specifies the channel and address of the destination data",
                  "items": {
                    "type": "object",
                    "title": "Object describing the destination",
                    "required": [
                      "register",
                      "channel"
                    ],
                    "properties": {
                      "channel": {
                        "type": "integer",
                        "title": "Number of the destination channel"
                      },
                      "register": {
                        "type": "integer",
                        "title": "Address of the destination register"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}