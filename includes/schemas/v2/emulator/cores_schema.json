{
  "type": "array",
  "title": "Array of core objects describing one or more cores in a multicore cluster",
  "items": {
    "type": "object",
    "title": "Object describing a core to emulate",
    "required": [
      "id",
      "order",
      "program",
      "channels",
      "options",
      "sampling_frequency",
      "deployment"
    ],
    "properties": {
      "id": {
        "type": "string",
        "title": "Identification string of the core"
      },
      "channels": {
        "type": "integer",
        "title": "number of channels active on this core"
      },
      "order": {
        "type": "integer",
        "title": "Field indicating the order in which cores must be run in a multicore emulation session"
      },
      "sampling_frequency": {
        "type": "integer",
        "title": "Sampling frequency for the core. "
      },
      "options": {
        "type": "object",
        "default": {},
        "title": "Core behaviour configuration options",
        "required": [
          "comparators"
        ],
        "properties": {
          "comparators": {
            "type": "string",
            "title": "Type of comparator implementation implemented for this core"
          },
          "efi_implementation": {
            "type": "string",
            "title": "EFI implementation selector"
          }
        }
      },
      "inputs": {
        "type": "array",
        "default": [],
        "title": "Array of objects that specify the external inputs to the core",
        "items": {
          "type": "object",
          "title": "Object describing a single external input",
          "required": [
            "metadata",
            "source",
            "name",
            "is_vector"
          ],
          "properties": {
            "is_vector": {
              "type": "boolean",
              "title": "Is the input a scalar or a vector"
            },
            "vector_size": {
              "type": "integer",
              "title": "size of the array port"
            },
            "metadata": {
              "allOff": [
                {
                  "$ref": "#/$defs/metadata"
                },
                {
                  "type": "object",
                  "required": [
                    "common_io"
                  ],
                  "properties": {
                    "common_io": {
                      "type": "boolean",
                      "title":"Flag specifying if the common_io address space should be used for this IO"
                    }
                  }
                }
              ]
            },
            "name": {
              "type": "string",
              "title": "Name of this input (tied to the CSV column title)"
            },
            "source": {
              "$ref": "#/$defs/input_source"
            }
          },
          "allOf": [
            {
              "if": {"properties": {"is_vector": {"const": true}}},
              "then": { "required": ["vector_size"] }
            }
          ]
        }
      },
      "outputs": {
        "type": "array",
        "default": [],
        "title": "Array of objects that specify the emulation outputs from the core",
        "items": {
          "type": "object",
          "title": "Object describing a single emulation output",
          "required": [
            "is_vector",
            "metadata",
            "name"
          ],
          "properties": {
            "metadata": {
              "allOff": [
                {
                  "$ref": "#/$defs/metadata"
                },
                {
                  "type": "object",
                  "required": [
                    "common_io"
                  ],
                  "properties": {
                    "common_io": {
                      "type": "boolean",
                      "title":"Flag specifying if the common_io address space should be used for this IO"
                    }
                  }
                }
              ]
            },
            "name": {
              "type": "string",
              "title": "Name to give to this output"
            },
            "type": {
              "type": "string",
              "enum": [
                "scalar",
                "vector"
              ],
              "title": "type of input"
            },
            "vector_size": {
              "type": "integer",
              "title": "size of the array port"
            }
          },
          "allOf": [
            {
              "if": {"properties": {"is_vector": {"const": true}}},
              "then": { "required": ["vector_size"] }
            }
          ]
        }
      },
      "memory_init": {
        "type": "array",
        "default": [],
        "title": "Array of objects that specify the initial values for state variables",
        "items": {
          "type": "object",
          "title": "Object describing the initial value for a single state variable",
          "required": [
            "value",
            "metadata",
            "name",
            "is_vector",
            "is_input",
            "is_output"
          ],
          "properties": {
            "value": {
              "anyOf": [
                {
                  "type": "number",
                  "title": "register address of the state variable to initialize"
                },
                {
                  "type": "array",
                  "title": "register address of the state variable to initialize",
                  "items": {
                    "type": "number"
                  }
                }
              ]
            },
            "metadata": {
              "$ref": "#/$defs/metadata"
            },
            "name": {
              "type": "string",
              "title": "Name of the state variable (For documentation purposes only, not used internally)"
            },
            "is_vector": {
              "type": "boolean",
              "title": "Is the memory a scalar or a vector"
            },
            "is_output": {
              "type": "boolean",
              "title": "Is this memory used as output"
            },
            "is_input": {
              "type": "boolean",
              "title": "Is this memory used as input"
            },
            "vector_size": {
              "type": "integer",
              "title": "size of the array port"
            }
          },
          "allOf": [
            {
              "if": {"properties": {"is_vector": {"const": true}}},
              "then": { "required": ["vector_size"] }
            }
          ]
        }
      },
      "program": {
        "type": "object",
        "title": "Description of the program to run on this core",
        "properties": {
          "headers": {
            "type": "array",
            "title": "array of strings containing the headers to be included",
            "items": {
              "type": "string",
              "title": "single header content"
            }
          },
          "content": {
            "type": "string",
            "title": "source code of the selected program"
          },
          "type":{
            "type": "string",
            "enum": ["c", "asm"]
          }
        },
        "required": [
          "content",
          "headers"
        ]
      },
      "deployment": {
        "title": "options for custom deployment",
        "type": "object",
        "properties": {
          "rom_address":{
            "type": "number",
            "title": "Address of the target core complex ROM bus"
          },
          "control_address": {
            "type": "number",
            "title": "Address of the target core complex control bus"
          },
          "has_reciprocal": {
            "type": "boolean",
            "title": "Flag indicating the implementation of reciprocal operation in correspondent core"
          }
        },
        "required": [
          "control_address",
          "rom_address",
          "has_reciprocal"
        ]
      }
    }
  }
}