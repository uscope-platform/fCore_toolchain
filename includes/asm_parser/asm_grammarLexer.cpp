
// Generated from /home/fils/git/fCore_toolchain/src/frontend/asm_grammar.g4 by ANTLR 4.10.1


#include "asm_grammarLexer.h"


using namespace antlr4;

using namespace asm_parser;


using namespace antlr4;

namespace {

struct Asm_grammarLexerStaticData final {
  Asm_grammarLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Asm_grammarLexerStaticData(const Asm_grammarLexerStaticData&) = delete;
  Asm_grammarLexerStaticData(Asm_grammarLexerStaticData&&) = delete;
  Asm_grammarLexerStaticData& operator=(const Asm_grammarLexerStaticData&) = delete;
  Asm_grammarLexerStaticData& operator=(Asm_grammarLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag asm_grammarlexerLexerOnceFlag;
Asm_grammarLexerStaticData *asm_grammarlexerLexerStaticData = nullptr;

void asm_grammarlexerLexerInitialize() {
  assert(asm_grammarlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<Asm_grammarLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "T__44", "Register", "Identifier", "Hexnum", 
      "Integer", "Octalnum", "HexDigit", "FloatingPointLiteral", "Exponent", 
      "String", "Letter", "Digit", "Label", "WS", "BlockComment", "LineComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "','", "'ldc'", "'stop'", "'nop'", "'add'", "'sub'", "'mul'", 
      "'and'", "'or'", "'satp'", "'satn'", "'efi'", "'bset'", "'bclr'", 
      "'binv'", "'bsel'", "'itf'", "'fti'", "'not'", "'rec'", "'abs'", "'popcnt'", 
      "'ldr'", "'ble'", "'bgt'", "'beq'", "'bne'", "'mov'", "'for('", "';'", 
      "')'", "'{'", "'}'", "'++'", "'--'", "'='", "'<'", "'>'", "'<='", 
      "'>='", "'#pragma '", "'let'", "'const'", "'input'", "'output'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "Register", "Identifier", 
      "Hexnum", "Integer", "Octalnum", "FloatingPointLiteral", "String", 
      "Label", "WS", "BlockComment", "LineComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,56,433,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,
  	2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
  	1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
  	10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,
  	13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
  	16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
  	20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
  	22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,
  	26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,
  	30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,
  	36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,
  	40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,
  	42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
  	45,1,45,4,45,306,8,45,11,45,12,45,307,1,46,1,46,1,46,1,46,5,46,314,8,
  	46,10,46,12,46,317,9,46,1,47,1,47,1,47,1,47,4,47,323,8,47,11,47,12,47,
  	324,1,48,4,48,328,8,48,11,48,12,48,329,1,49,4,49,333,8,49,11,49,12,49,
  	334,1,49,1,49,1,50,1,50,1,51,3,51,342,8,51,1,51,4,51,345,8,51,11,51,12,
  	51,346,1,51,1,51,5,51,351,8,51,10,51,12,51,354,9,51,1,51,3,51,357,8,51,
  	1,51,1,51,4,51,361,8,51,11,51,12,51,362,1,51,3,51,366,8,51,1,51,4,51,
  	369,8,51,11,51,12,51,370,1,51,3,51,374,8,51,1,52,1,52,3,52,378,8,52,1,
  	52,4,52,381,8,52,11,52,12,52,382,1,53,1,53,1,53,1,53,1,53,1,53,5,53,391,
  	8,53,10,53,12,53,394,9,53,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,
  	1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,413,8,58,10,58,12,58,416,
  	9,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,5,59,427,8,59,10,59,
  	12,59,430,9,59,1,59,1,59,1,414,0,60,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
  	8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
  	20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
  	63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
  	43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,0,103,51,105,0,107,52,
  	109,0,111,0,113,53,115,54,117,55,119,56,1,0,8,2,0,79,79,111,111,3,0,48,
  	57,65,70,97,102,2,0,69,69,101,101,2,0,43,43,45,45,2,0,39,39,92,92,2,0,
  	65,90,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,450,0,1,1,0,0,0,0,3,
  	1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
  	0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
  	1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
  	0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
  	0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
  	1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
  	0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
  	0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
  	1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,
  	0,0,0,103,1,0,0,0,0,107,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,
  	0,0,0,119,1,0,0,0,1,121,1,0,0,0,3,123,1,0,0,0,5,127,1,0,0,0,7,132,1,0,
  	0,0,9,136,1,0,0,0,11,140,1,0,0,0,13,144,1,0,0,0,15,148,1,0,0,0,17,152,
  	1,0,0,0,19,155,1,0,0,0,21,160,1,0,0,0,23,165,1,0,0,0,25,169,1,0,0,0,27,
  	174,1,0,0,0,29,179,1,0,0,0,31,184,1,0,0,0,33,189,1,0,0,0,35,193,1,0,0,
  	0,37,197,1,0,0,0,39,201,1,0,0,0,41,205,1,0,0,0,43,209,1,0,0,0,45,216,
  	1,0,0,0,47,220,1,0,0,0,49,224,1,0,0,0,51,228,1,0,0,0,53,232,1,0,0,0,55,
  	236,1,0,0,0,57,240,1,0,0,0,59,245,1,0,0,0,61,247,1,0,0,0,63,249,1,0,0,
  	0,65,251,1,0,0,0,67,253,1,0,0,0,69,256,1,0,0,0,71,259,1,0,0,0,73,261,
  	1,0,0,0,75,263,1,0,0,0,77,265,1,0,0,0,79,268,1,0,0,0,81,271,1,0,0,0,83,
  	280,1,0,0,0,85,284,1,0,0,0,87,290,1,0,0,0,89,296,1,0,0,0,91,303,1,0,0,
  	0,93,309,1,0,0,0,95,318,1,0,0,0,97,327,1,0,0,0,99,332,1,0,0,0,101,338,
  	1,0,0,0,103,373,1,0,0,0,105,375,1,0,0,0,107,384,1,0,0,0,109,397,1,0,0,
  	0,111,399,1,0,0,0,113,401,1,0,0,0,115,404,1,0,0,0,117,408,1,0,0,0,119,
  	422,1,0,0,0,121,122,5,44,0,0,122,2,1,0,0,0,123,124,5,108,0,0,124,125,
  	5,100,0,0,125,126,5,99,0,0,126,4,1,0,0,0,127,128,5,115,0,0,128,129,5,
  	116,0,0,129,130,5,111,0,0,130,131,5,112,0,0,131,6,1,0,0,0,132,133,5,110,
  	0,0,133,134,5,111,0,0,134,135,5,112,0,0,135,8,1,0,0,0,136,137,5,97,0,
  	0,137,138,5,100,0,0,138,139,5,100,0,0,139,10,1,0,0,0,140,141,5,115,0,
  	0,141,142,5,117,0,0,142,143,5,98,0,0,143,12,1,0,0,0,144,145,5,109,0,0,
  	145,146,5,117,0,0,146,147,5,108,0,0,147,14,1,0,0,0,148,149,5,97,0,0,149,
  	150,5,110,0,0,150,151,5,100,0,0,151,16,1,0,0,0,152,153,5,111,0,0,153,
  	154,5,114,0,0,154,18,1,0,0,0,155,156,5,115,0,0,156,157,5,97,0,0,157,158,
  	5,116,0,0,158,159,5,112,0,0,159,20,1,0,0,0,160,161,5,115,0,0,161,162,
  	5,97,0,0,162,163,5,116,0,0,163,164,5,110,0,0,164,22,1,0,0,0,165,166,5,
  	101,0,0,166,167,5,102,0,0,167,168,5,105,0,0,168,24,1,0,0,0,169,170,5,
  	98,0,0,170,171,5,115,0,0,171,172,5,101,0,0,172,173,5,116,0,0,173,26,1,
  	0,0,0,174,175,5,98,0,0,175,176,5,99,0,0,176,177,5,108,0,0,177,178,5,114,
  	0,0,178,28,1,0,0,0,179,180,5,98,0,0,180,181,5,105,0,0,181,182,5,110,0,
  	0,182,183,5,118,0,0,183,30,1,0,0,0,184,185,5,98,0,0,185,186,5,115,0,0,
  	186,187,5,101,0,0,187,188,5,108,0,0,188,32,1,0,0,0,189,190,5,105,0,0,
  	190,191,5,116,0,0,191,192,5,102,0,0,192,34,1,0,0,0,193,194,5,102,0,0,
  	194,195,5,116,0,0,195,196,5,105,0,0,196,36,1,0,0,0,197,198,5,110,0,0,
  	198,199,5,111,0,0,199,200,5,116,0,0,200,38,1,0,0,0,201,202,5,114,0,0,
  	202,203,5,101,0,0,203,204,5,99,0,0,204,40,1,0,0,0,205,206,5,97,0,0,206,
  	207,5,98,0,0,207,208,5,115,0,0,208,42,1,0,0,0,209,210,5,112,0,0,210,211,
  	5,111,0,0,211,212,5,112,0,0,212,213,5,99,0,0,213,214,5,110,0,0,214,215,
  	5,116,0,0,215,44,1,0,0,0,216,217,5,108,0,0,217,218,5,100,0,0,218,219,
  	5,114,0,0,219,46,1,0,0,0,220,221,5,98,0,0,221,222,5,108,0,0,222,223,5,
  	101,0,0,223,48,1,0,0,0,224,225,5,98,0,0,225,226,5,103,0,0,226,227,5,116,
  	0,0,227,50,1,0,0,0,228,229,5,98,0,0,229,230,5,101,0,0,230,231,5,113,0,
  	0,231,52,1,0,0,0,232,233,5,98,0,0,233,234,5,110,0,0,234,235,5,101,0,0,
  	235,54,1,0,0,0,236,237,5,109,0,0,237,238,5,111,0,0,238,239,5,118,0,0,
  	239,56,1,0,0,0,240,241,5,102,0,0,241,242,5,111,0,0,242,243,5,114,0,0,
  	243,244,5,40,0,0,244,58,1,0,0,0,245,246,5,59,0,0,246,60,1,0,0,0,247,248,
  	5,41,0,0,248,62,1,0,0,0,249,250,5,123,0,0,250,64,1,0,0,0,251,252,5,125,
  	0,0,252,66,1,0,0,0,253,254,5,43,0,0,254,255,5,43,0,0,255,68,1,0,0,0,256,
  	257,5,45,0,0,257,258,5,45,0,0,258,70,1,0,0,0,259,260,5,61,0,0,260,72,
  	1,0,0,0,261,262,5,60,0,0,262,74,1,0,0,0,263,264,5,62,0,0,264,76,1,0,0,
  	0,265,266,5,60,0,0,266,267,5,61,0,0,267,78,1,0,0,0,268,269,5,62,0,0,269,
  	270,5,61,0,0,270,80,1,0,0,0,271,272,5,35,0,0,272,273,5,112,0,0,273,274,
  	5,114,0,0,274,275,5,97,0,0,275,276,5,103,0,0,276,277,5,109,0,0,277,278,
  	5,97,0,0,278,279,5,32,0,0,279,82,1,0,0,0,280,281,5,108,0,0,281,282,5,
  	101,0,0,282,283,5,116,0,0,283,84,1,0,0,0,284,285,5,99,0,0,285,286,5,111,
  	0,0,286,287,5,110,0,0,287,288,5,115,0,0,288,289,5,116,0,0,289,86,1,0,
  	0,0,290,291,5,105,0,0,291,292,5,110,0,0,292,293,5,112,0,0,293,294,5,117,
  	0,0,294,295,5,116,0,0,295,88,1,0,0,0,296,297,5,111,0,0,297,298,5,117,
  	0,0,298,299,5,116,0,0,299,300,5,112,0,0,300,301,5,117,0,0,301,302,5,116,
  	0,0,302,90,1,0,0,0,303,305,5,114,0,0,304,306,3,111,55,0,305,304,1,0,0,
  	0,306,307,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,92,1,0,0,0,309,
  	315,3,109,54,0,310,314,5,95,0,0,311,314,3,109,54,0,312,314,3,111,55,0,
  	313,310,1,0,0,0,313,311,1,0,0,0,313,312,1,0,0,0,314,317,1,0,0,0,315,313,
  	1,0,0,0,315,316,1,0,0,0,316,94,1,0,0,0,317,315,1,0,0,0,318,319,5,48,0,
  	0,319,320,5,120,0,0,320,322,1,0,0,0,321,323,3,101,50,0,322,321,1,0,0,
  	0,323,324,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,96,1,0,0,0,326,
  	328,3,111,55,0,327,326,1,0,0,0,328,329,1,0,0,0,329,327,1,0,0,0,329,330,
  	1,0,0,0,330,98,1,0,0,0,331,333,2,48,55,0,332,331,1,0,0,0,333,334,1,0,
  	0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,336,1,0,0,0,336,337,7,0,0,0,337,
  	100,1,0,0,0,338,339,7,1,0,0,339,102,1,0,0,0,340,342,5,45,0,0,341,340,
  	1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,345,2,48,57,0,344,343,1,0,
  	0,0,345,346,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,348,1,0,0,0,348,
  	352,5,46,0,0,349,351,2,48,57,0,350,349,1,0,0,0,351,354,1,0,0,0,352,350,
  	1,0,0,0,352,353,1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,355,357,3,105,
  	52,0,356,355,1,0,0,0,356,357,1,0,0,0,357,374,1,0,0,0,358,360,5,46,0,0,
  	359,361,2,48,57,0,360,359,1,0,0,0,361,362,1,0,0,0,362,360,1,0,0,0,362,
  	363,1,0,0,0,363,365,1,0,0,0,364,366,3,105,52,0,365,364,1,0,0,0,365,366,
  	1,0,0,0,366,374,1,0,0,0,367,369,2,48,57,0,368,367,1,0,0,0,369,370,1,0,
  	0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,372,1,0,0,0,372,374,3,105,52,
  	0,373,341,1,0,0,0,373,358,1,0,0,0,373,368,1,0,0,0,374,104,1,0,0,0,375,
  	377,7,2,0,0,376,378,7,3,0,0,377,376,1,0,0,0,377,378,1,0,0,0,378,380,1,
  	0,0,0,379,381,2,48,57,0,380,379,1,0,0,0,381,382,1,0,0,0,382,380,1,0,0,
  	0,382,383,1,0,0,0,383,106,1,0,0,0,384,385,5,32,0,0,385,386,5,39,0,0,386,
  	392,1,0,0,0,387,388,5,92,0,0,388,391,9,0,0,0,389,391,8,4,0,0,390,387,
  	1,0,0,0,390,389,1,0,0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,
  	0,393,395,1,0,0,0,394,392,1,0,0,0,395,396,5,39,0,0,396,108,1,0,0,0,397,
  	398,7,5,0,0,398,110,1,0,0,0,399,400,2,48,57,0,400,112,1,0,0,0,401,402,
  	3,93,46,0,402,403,5,58,0,0,403,114,1,0,0,0,404,405,7,6,0,0,405,406,1,
  	0,0,0,406,407,6,57,0,0,407,116,1,0,0,0,408,409,5,47,0,0,409,410,5,42,
  	0,0,410,414,1,0,0,0,411,413,9,0,0,0,412,411,1,0,0,0,413,416,1,0,0,0,414,
  	415,1,0,0,0,414,412,1,0,0,0,415,417,1,0,0,0,416,414,1,0,0,0,417,418,5,
  	42,0,0,418,419,5,47,0,0,419,420,1,0,0,0,420,421,6,58,0,0,421,118,1,0,
  	0,0,422,423,5,47,0,0,423,424,5,47,0,0,424,428,1,0,0,0,425,427,8,7,0,0,
  	426,425,1,0,0,0,427,430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,431,
  	1,0,0,0,430,428,1,0,0,0,431,432,6,59,0,0,432,120,1,0,0,0,21,0,307,313,
  	315,324,329,334,341,346,352,356,362,365,370,373,377,382,390,392,414,428,
  	1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  asm_grammarlexerLexerStaticData = staticData.release();
}

}

asm_grammarLexer::asm_grammarLexer(CharStream *input) : Lexer(input) {
  asm_grammarLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *asm_grammarlexerLexerStaticData->atn, asm_grammarlexerLexerStaticData->decisionToDFA, asm_grammarlexerLexerStaticData->sharedContextCache);
}

asm_grammarLexer::~asm_grammarLexer() {
  delete _interpreter;
}

std::string asm_grammarLexer::getGrammarFileName() const {
  return "asm_grammar.g4";
}

const std::vector<std::string>& asm_grammarLexer::getRuleNames() const {
  return asm_grammarlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& asm_grammarLexer::getChannelNames() const {
  return asm_grammarlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& asm_grammarLexer::getModeNames() const {
  return asm_grammarlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& asm_grammarLexer::getVocabulary() const {
  return asm_grammarlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView asm_grammarLexer::getSerializedATN() const {
  return asm_grammarlexerLexerStaticData->serializedATN;
}

const atn::ATN& asm_grammarLexer::getATN() const {
  return *asm_grammarlexerLexerStaticData->atn;
}




void asm_grammarLexer::initialize() {
  std::call_once(asm_grammarlexerLexerOnceFlag, asm_grammarlexerLexerInitialize);
}
